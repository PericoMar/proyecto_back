GIT:
Nos ayuda a subirlo a Github
Sistema de control de versiones.
Se instala simple y comprobamos en la terminal con git --version

1.- Inicializar un repositorio de git de nuestro proyecto --> git init
Se genera un directorio oculto en donde hayamos incializado el repositorio (.git)

Podemos tener algo en produccion y mientras trabajar en una nueva funcionalidad en paralelo,
se llaman ramas (branch) para que cuando este terminada la unimos/mercheamos (ingit).
Para ver las distintas ramas que tiene nuestro codigo es: git branch (enseña solo las que hayan hecho cambios)
git branch --show-current enseña la rama en la que estamos

git status --> Nos habla del estatus de nuestro proyecto

git commit -m "Primer commit" --> Para hacer un commit, con -m podemos poner un mensaje

Yarn (npm install --global yarn): 
Nos permite gestionar las dependencias de nuestro proyecto.
Para agregar las librerias de terceros.

yarn init --> Pide nombre del proyecto, version, descripcion, etc.. Nos crea un JSON, package.json.

NodeMon --> En desarrollo nuestro servidor se reincie cada vez que hagamos cambios
yarn add nodemon -D --> Para añadir una libreria, se añade un elemento mas a nuestro JSON, que en este
caso seria devDependencies { "nodemon": "^3.0.1" } Porque ahora nuestro desarrollo depende de esta libreria
Se nos ha añadido ademas al proyecto una carpeta con todas las librerias que dependemos porque nodemon depende de otras más.

GutHub:
Creamos nuevo repositorio (proyecto_back)
create a new repository on the command line
echo "# proyecto_back" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/PericoMar/proyecto_back.git
git push -u origin main

…or push an existing repository from the command line EN NUESTRO CASO USAREMOS ESTE.
git remote add origin(lo cambiamos por github porque es mas intuitivo) https://github.com/PericoMar/proyecto_back.git
git branch -M main
git push -u origin(lo cambiamos por github) main (para empujar los archivos)

git remote --> github

git status --> No esta subido el package JSON donde pone nuestras dependencias
por lo que hacemos git add .\package.json para despues hacerle un commit
git commit -m "Agregamos package.json"

.gitignore: Para que github ignore depende que archivos, en nuestro caso los node_modules
por eso creamos un archivo .gitignore y dentro metemos /node_modules
Ahora que tenemos ignorado todo lo que no queremos subir e vez de tener que ir subiendo archivo a archivo
hacemos git add . y se suben todos.

Propiedad "scripts" del package.json:
Los scripts son sentencias que podemos utilizar usando Yarn, que recordemos que fue la misma aplicacion
que nos dio el package.json y ademas donde instalamos nodemon.
Añadimos al JSON un "scripts": { "dev" : "nodemon index.js" } Aqui utilizamos la libreria de nodemon
Si nosotros ponemos nodemon index.js directamente en la terminal no hace lo que queremos
por eso a partir de yarn usamos: yarn dev y ahora si se levanta nuestro servidor de desarrollo y actualiza los cambios.
yarn dev --> 
yarn run v1.22.19
$ nodemon index.js
[nodemon] 3.0.1
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,cjs,json
[nodemon] starting `node index.js`


git push github (nuestro reporsitorio remoto) main (que es la rama en la que estamos (branch), al principio a 
mi me aparecia como rama predeterminada branch master pero lo cambie con el comando: git branch -M main)
--> Ya tenemos en github nuestros archivos.
Se puede hacer con git push -u github main, para que quede seteado que se van a hacer los push al repositorio de github de la rama
main y asi cada vez que hagamos un push solo tenemos que poner git push.


Ahora nesecitamos vincular los dos servicios, donde tenemos nuestro repositorio y el servidor en si.
lo hacemos en render (gratuito). Conectamos con github y elegimos el repositorio en nuestro caso proyecto_back
Build command -- yarn
Start command -- yarn start (Al principio no existe, para cambiar eso nos vamos al package.json 
y dentro de scripts metemos "start" : "node index.js" ) -->
Jul 19 09:02:34 PM  ==> Starting service with 'yarn start'
Jul 19 09:02:36 PM  yarn run v1.22.5
Jul 19 09:02:36 PM  $ node index.js
Ahora render se queda como cargando porque si recordamos nosotros estabamos escuchando server.listen(Un puerto cualquiera), pero eso a render
no le vale tenemos usar un puerto en concreto (El atributo PORT de env de process), para ello añadimos otra libreria en este caso 
dotenv (npm dotenv en google para conocer mas sobre la libreria):
yarn add dotenv -D (Se nos mete como dependencia en el package.json)
Creamos .env --> Metemos dentro el puerto que queremos.
Y en nuestra aplicacion ponemos --> require('dotenv').config() --> Añade a env el atributo PORT = 4000
Cambiamos en el index el puerto del que estamos escuchando a server.listen(process.env.PORT)
Entonces en nuestra maquina el puerto será el 4000 pero cuando llegue a produccion será lo que defina render.com

